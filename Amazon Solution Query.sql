USE amazon_db;

-- 1. List all customers who have made purchases of more than $80.
SELECT Users.user_id, Users.name, 
SUM(Orders.total_amount) AS total_spent
FROM Orders
LEFT JOIN Users
ON Orders.user_id=Users.user_id
GROUP BY Users.user_id
HAVING total_spent>80;

SELECT * FROM Users;

-- 2. Retrieve all orders placed in the last 280 days along with the customer name and email.
SELECT Orders.order_id, Orders.order_date, Users.name, Users.email_id
FROM Users
RIGHT JOIN Orders
ON Users.user_id=Orders.user_id
WHERE Orders.order_date>= CURDATE()-INTERVAL 280 DAY ;

-- 3. Find the average product price for each category.
SELECT category, AVG(price) AS avg_price
FROM Products
GROUP BY category;

-- 4. List all customers who have purchased a product from the category Electronics.
SELECT Products.category, Users.name, Users.email_id, Products.name
FROM Users
JOIN Orders ON Orders.user_id=Users.user_id
JOIN OrderDetails ON Orders.order_id=OrderDetails.order_id
JOIN Products ON OrderDetails.product_id=Products.product_id
WHERE Products.category='Electronics';

-- 5. Find the total number of products sold and the total revenue generated for each product.
SELECT Products.name AS Product_name,
COUNT(OrderDetails.quantity) AS total_products_sold
FROM OrderDetails
INNER JOIN Products
ON OrderDetails.product_id=Products.product_id
GROUP BY Products.name;

-- 6. Update the price of all products in the Books category, increasing it by 10% Query.
SET SQL_SAFE_UPDATES=0;

UPDATE Products
SET price=price*1.10
WHERE category='Books';

SELECT * FROM Products;

-- 7.Remove all orders that were placed before 2020.
DELETE FROM Orders
WHERE order_date<'2020-01-01';

-- 8. Write a query to fetch the order details, including customer name, product name, and quantity, for orders placed on 2024-05-01.
SELECT Orders.order_id, Users.name AS customer_name, Products.name AS product_name, OrderDetails.quantity
FROM Orders
LEFT JOIN Users ON Orders.user_id=Users.user_id
LEFT JOIN OrderDetails ON Orders.order_id=OrderDetails.order_id
LEFT JOIN Products ON Products.product_id=OrderDetails.product_id
WHERE Orders.order_date='2024-05-01';

-- 9. Fetch all customers and the total number of orders they have placed.
SELECT 
Users.name AS customer_name,
COUNT(Orders.order_id) AS total_orders_placed
FROM Users
LEFT JOIN Orders
ON Users.user_id=Orders.user_id
GROUP BY Users.user_id;

-- 10. Retrieve the average rating for all products in the Electronics category.
SELECT category, AVG(price) AS Avg_price
FROM Products
WHERE category='Electronics';

-- 11. List all customers who purchased more than 1 units of any product, including the product name and total quantity purchased.
SELECT 
Users.name AS customer_name,
Users.email_id AS customer_mail_id,
Products.name AS product_name,
SUM(OrderDetails.quantity) AS total_quantity_purchased
FROM Users
JOIN Orders ON Orders.user_id=Users.user_id
JOIN OrderDetails ON Orders.order_id=OrderDetails.order_id
JOIN Products ON OrderDetails.product_id=Products.product_id
GROUP BY Users.user_id, Products.product_id
HAVING total_quantity_purchased>1;

-- 12. Find the total revenue generated by each category along with the category name.
SELECT 
Products.category AS category_name,
SUM(Products.price*OrderDetails.quantity) AS revenue_generated
FROM Products
LEFT JOIN OrderDetails
ON Products.product_id=OrderDetails.product_id
GROUP BY Products.category;